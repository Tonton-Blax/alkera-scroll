<script>
    import { browser } from '$app/environment';
    import gsap from 'gsap';
    import MotionPathPlugin from 'gsap/dist/MotionPathPlugin.js';
    import { onMount, tick } from 'svelte';
    import DrawSVGPlugin from "$lib/gsap/DrawSVGPlugin";
    import { getEllipseLength } from '$lib/utils';

    $: if (browser && readyLine)
        gsap.to('#arrow-cursor', { ...(arrowPosition ? { y: arrowPosition, opacity: 1 } : { opacity : 0 }) });

    $: if (browser && currentGroup)
        setGroupPosition(currentGroup);

    /** @type {SVGEllipseElement | undefined} */
    let internalOrbit;

    /** @type {SVGEllipseElement | undefined} */
    let externalOrbit;

    /** @type {SVGEllipseElement | undefined} */
    let middleOrbit;

    /** @type {SVGElement | undefined} */
    let galaxy;

    /** @type {number | undefined} */
    let arrowPosition;

    let readyLine = false;

    /** @type {undefined | App.Metier} */
    let currentGroup;

    let currentProgress = 0.99999;

    const duration = 10;
    
    /** @type {App.Planet[]} */
    const entites = [
        { url : '/', id: 'pyrim',                  orbit: 'internal',  order: 1,    groups: ['audit', 'gestion'] },
        { url : '/', id: 'dynaren',                orbit: 'internal',  order: 2,    groups: ['assistance'] },
        { url : '/', id: 'am',                     orbit: 'internal',  order: 3,    groups: ['audit','gestion'] },
        { url : '/', id: 'immolab',                orbit: 'middle',    order: 1,    groups: ['audit'] },
        { url : '/', id: 'geco',                   orbit: 'middle',    order: 2,    groups: ['delegation'] },
        { url : '/', id: 'electroren',             orbit: 'middle',    order: 3,    groups: ['assistance'] },
        { url : '/', id: 'manderley',              orbit: 'middle',    order: 4,    groups: ['gestion'] },
        { url : '/', id: 'polyexpert_construction',orbit: 'middle',    order: 5,    groups: ['gestion'] },
        { url : '/', id: 'polyexpert_entreprises', orbit: 'middle',    order: 6,    groups: ['gestion'] },
        { url : '/', id: 'ekkoia',                 orbit: 'external',  order: 1,    groups: ['audit'] },
        { url : '/', id: 'claims_ai',              orbit: 'external',  order: 2,    groups: ['delegation'] },
        { url : '/', id: 'batifive',               orbit: 'external',  order: 3,    groups: ['assistance']  },
        { url : '/', id: 'polytel',                orbit: 'external',  order: 4,    groups: ['assistance']  },
        { url : '/', id: 'polyexpert',             orbit: 'external',  order: 5,    groups: ['gestion'] },    
        { url : '/', id: 'ciblexperts',            orbit: 'external',  order: 6,    groups: ['gestion'] },
        { url : '/', id: 'quantimme',              orbit: 'external',  order: 7,    groups: ['audit'] },
    ]

    /** @type {App.Orbits} */
    const orbits = {

        internal: {
            el: internalOrbit,
            offsetGroup : {
                audit: 0.01, gestion: 0, assistance: 0.45, delegation: 0.7
            },
            minMaxSizes: [ 32.35, 51.55 ],
            planets: entites.filter(e => e.orbit === 'internal'),
            tl: gsap.timeline({ repeat: -1 }),
            progress: 0.99999
        },

        middle: {
            el: middleOrbit,
            offsetGroup : { 
                audit: 0.01, gestion: 0.35, assistance: 0.85, delegation: 0.7
            },
            minMaxSizes: [ 25.48, 60.94 ],
            planets: entites.filter(e => e.orbit === 'middle'),
            tl: gsap.timeline({ repeat: -1 }),
            progress: 0.99999
        },

        external: {
            el: externalOrbit,
            offsetGroup : {
                audit: 0.01, gestion: 0.36, assistance: 0.45, delegation: 0.8
            },
            minMaxSizes: [ 21.49, 73.75 ],
            planets:entites.filter(e => e.orbit === 'external'),
            tl: gsap.timeline({ repeat: -1 }),
            progress: 0.99999
        }
    }
    

    /** @param {App.Metier} metier*/
    const setGroupPosition = (metier) => {
        if (!metier) return;
        
        Object.keys(orbits).forEach(orbitName => {
            const orbit = orbits[orbitName];
            console.log(orbit);
            //gsap.to(tl, {progress: entite?.start + orbits[entite.orbit].offsetGroup[metier]})
        })
    }

    if (browser)
        gsap.registerPlugin(MotionPathPlugin, DrawSVGPlugin);

    onMount(async() => {
        readyLine = true;
        MotionPathPlugin.convertToPath(internalOrbit);
        MotionPathPlugin.convertToPath(externalOrbit);
        MotionPathPlugin.convertToPath(middleOrbit);

        arrowPosition = 89
        gsap.timeline()
        .to('#orbit-mask', {
            duration: 1,
            autoAlpha: 0,
            // yPercent: 100,
            // xPercent: 21.2,
        })
        .to('text > tspan', { opacity: 1, duration: .12, ease: "power2.inOut"}, 0);

        await tick();

        Object.keys(orbits).forEach(orbitName => initializeOrbit(/** @type {keyof App.Orbits}*/(orbitName)));

        galaxy?.addEventListener("mouseenter", function() {
            entites.forEach(({tl}) => tl?.timeScale?.(0.4));
        });

        galaxy?.addEventListener("mouseleave", function() {
            entites.forEach(({tl}) => tl?.timeScale?.(1));
        });

    });

    /** @param {keyof App.Orbits} orbitName 
     *  @returns {gsap.core.Timeline}
    */
    function animateOrbit(orbitName) {

        const tl = gsap.timeline({ defaults: { ease: "none", repeat: -1 } });

        orbits[orbitName].planets.forEach((entite, i) => {
            const orbitStartTime = (duration / orbits[orbitName].planets.length) * i;
            
            tl.to(`.entite-${entite.id}`, { 
                motionPath: { 
                    path: `#${orbitName}`, 
                    align: `#${orbitName}`, 
                    alignOrigin: [0.5, 0.5],
                    start: 0.24,
                    end: 1.24
                }, 
                duration,
            }, orbitStartTime )
            .fromTo(`.entite-${entite.id}`, {scale:1}, {
                    scale: 1 / ( orbits[entite.orbit].minMaxSizes[1] / orbits[entite.orbit].minMaxSizes[0] ),
                    duration,
                    repeat  : -1,
                    yoyo:true,
                    ease: 'sine.inOut',
            }, '+=0.24');
        });
        return tl;
    }


    /** @param {keyof App.Orbits} orbitName */
    const initializeOrbit = (orbitName) => {
        orbits[orbitName].tl.add(animateOrbit(orbitName), 0.24 - currentProgress);
        orbits[orbitName].tl.progress(currentProgress); 
    };
    
    const reset = () => {
        Object.keys(orbits).forEach(orbitName => {
            const orbit = orbits[/** @type {keyof App.Orbits} */ (orbitName)];
            orbit.progress = orbit.tl.progress();
        })
    };

</script>


<section id="section-orbits" class="w-screen h-screen bg-amande">
<svg bind:this={galaxy} 
    color-interpolation-filters="sRGB"
    class="w-4/5 h-auto mx-auto overflow-visible" 
    xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="Calque_1" x="0" y="0" version="1.1" viewBox="0 0 1360.5 988.92"
>

    <g id="arrow-cursor" x="0" y="0" transform="translate(-125 89)" opacity="0" >
        <line fill="none" stroke="#6563CA" stroke-width="3" stroke-miterlimit="10" x1="0" y1="4.49" x2="11.66" y2="4.49"/>
        <polygon fill="#6563CA" points="10.34,8.98 18.12,4.49 10.34,0"/>
    </g>

    <!-- svelte-ignore a11y-no-static-element-interactions -->
    <!-- svelte-ignore a11y-mouse-events-have-key-events -->
    <!-- svelte-ignore a11y-click-events-have-key-events -->
    <text transform="translate(-100 100)" 

        on:mouseover={(e) => {
            if (!e.target?.dataset?.yArrow)
                return;
            arrowPosition = e.target?.dataset?.yArrow
        }} 
        on:mouseout={() => 
            arrowPosition = undefined 
        }
    >
        <tspan on:click={()=>currentGroup="audit"} opacity="0" x="0" y="0" data-y-arrow="89" fill="#12473B" class="hover:fill-pervenche hover:cursor-pointer transition-all" font-family="field-gothic-wide" font-size="21px">Audit, conseil et prévention</tspan>
        <tspan on:click={()=>currentGroup="gestion"} opacity="0" x="0" y="31.5" data-y-arrow="121" fill="#12473B" class="hover:fill-pervenche hover:cursor-pointer transition-all" font-family="field-gothic-wide" font-size="21px">Gestion des risques et expertise</tspan>
        <tspan on:click={()=>currentGroup="assistance"} opacity="0" x="0" y="63" data-y-arrow="152" fill="#12473B" class="hover:fill-pervenche hover:cursor-pointer transition-all" font-family="field-gothic-wide" font-size="21px">Assistance et réparation</tspan>
        <tspan on:click={()=>currentGroup="delegation"} opacity="0" x="0" y="94.5" data-y-arrow="183" fill="#12473B" class="hover:fill-pervenche hover:cursor-pointer transition-all" font-family="field-gothic-wide" font-size="21px">Délégation</tspan>

    </text>


    <filter id="logo-alkera" x="0%" y="0%" width="100%" height="100%">
        <feImage xlink:href="/orbits/alkera.svg"/>
        <feComposite in2="SourceGraphic" operator="over" />
    </filter>

    
    <ellipse bind:this={internalOrbit} id="internal" cx="659.02" cy="406.32" fill="none" stroke="#12473B" stroke-miterlimit="10" rx="310.39" ry="147.85" transform="rotate(-16.342 659.08 406.403)"/>
    <ellipse bind:this={middleOrbit} id="middle" cx="667.44" cy="435.04" fill="none" stroke="#12473B" stroke-miterlimit="10" rx="493.5" ry="237.51" transform="rotate(-16.342 667.5 435.124)"/>
    <ellipse bind:this={externalOrbit} id="external" cx="680.25" cy="478.73" fill="none" stroke="#12473B" stroke-miterlimit="10" rx="701.55" ry="332.01" transform="rotate(-16.342 680.308 478.821)"/>

    <g fill="#12473B">

        {#each entites as entite, index(entite.id)}

        <filter id={entite.id} x="0%" y="0%" width="100%" height="100%">
            <feImage xlink:href="/orbits/{entite.id}.png" />
            <feComposite in2="SourceGraphic" operator="over" />
        </filter>

        <circle
            class="entite-{entite.id} entite-circle"
            class:fill-pervenche={currentGroup && entite.groups.includes(currentGroup)}
            filter="url(#{entite.id})"
            data-orbit={entite.orbit}
            cx="701.24" cy="548.44" r="{orbits[entite.orbit].minMaxSizes[1]}"
        />

        {/each}
    </g>



    <g id="orbit-mask" transform="skewX(16.35)">
        <rect x="-60.28%" y="0"  width="100%" height="100%" class="fill-amande"/>
    </g>

    <path id="orbit-dash-line" fill="none" stroke="#12473B" stroke-dasharray="8.1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width=".675" d="m540.57.34 289.74 988.25"/>


    <circle filter="url(#logo-alkera)" cx="653.65" cy="393.04" r="90.81" fill="#12473B"/>


  </svg>      
</section>

<style lang="postcss">

.box {
    overflow: visible;
}

.entite {
    transition: all 2s;
    transition: all 1300ms ease;
    outline-offset: 0px;
    outline: 2px dashed transparent;
}

.entite-circle:hover {
    outline: 2px dashed theme('colors.feuille');
    cursor: pointer;
    border-radius:100%;
    outline-offset: 8px;
}

/* #section-orbits {
    background: url(orbits/maquette-full.svg) no-repeat;
    background-size: 114%;
    background-position: 43% -63%;
}
svg {
    filter:grayscale(100%);
    mix-blend-mode: difference;
} */
</style>